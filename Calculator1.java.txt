
package Calculator1;

import java.awt.Color;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.SwingConstants;
import javax.swing.plaf.FontUIResource;

public class Calculator1 implements ActionListener {

    boolean isOperatorClicked = false;
    double num1 = 0;
    String operator = "";
    
    JFrame jf;
    JLabel displayJLabel, resultField;
    
    JButton[] numberButtons;
    JButton[] operatorButtons;
    JButton equalButton, clearButton;

public Calculator1() {
		
	    jf=new JFrame("Calculator");
		jf.setLayout(null);
		jf.setSize(600, 600);
		jf.getContentPane().setBackground(Color.black);
		jf.setLocation(300,150);
	
		
	    displayJLabel=new JLabel();
		displayJLabel.setBounds(30, 50, 540, 50);
		displayJLabel.setBackground(Color.gray);
		displayJLabel.setOpaque(true);
		displayJLabel.setHorizontalAlignment(SwingConstants.RIGHT);
		displayJLabel.setForeground(Color.white);
		displayJLabel.setFont(new FontUIResource("gilroy", 40, 40));
		jf.add(displayJLabel);
		
		
		JButton sevenButton=new JButton("7");
		sevenButton.setBounds(30, 130, 80, 80);
		sevenButton.setBackground(Color.white);
		sevenButton.addActionListener(this);
		jf.add(sevenButton);
		
		JButton eightButton=new JButton("8");
		eightButton.setBounds(130, 130, 80, 80);
		eightButton.setBackground(Color.WHITE);
		eightButton.addActionListener(this);
		jf.add(eightButton);
		

		JButton nineButton=new JButton("9");
		nineButton.setBounds(230, 130, 80, 80);
		nineButton.setBackground(Color.white);
		nineButton.addActionListener(this);
		jf.add(nineButton);
		
		JButton fourButton=new JButton("4");
		fourButton.setBounds(30, 230, 80, 80);
		fourButton.setBackground(Color.white);
		fourButton.addActionListener(this);
		jf.add(fourButton);
		
		JButton fiveButton=new JButton("5");
		fiveButton.setBounds(130, 230, 80, 80);
		fiveButton.setBackground(Color.white);
		fiveButton.addActionListener(this);
		jf.add(fiveButton);
		
		

		JButton sixButton=new JButton("6");
		sixButton.setBounds(230, 230, 80, 80);
		sixButton.setBackground(Color.white);
		sixButton.addActionListener(this);
		jf.add(sixButton);
		
		JButton oneButton=new JButton("1");
		oneButton.setBounds(30, 330, 80, 80);
		oneButton.setBackground(Color.white);
		oneButton.addActionListener(this);
		jf.add(oneButton);
		
		JButton twoButton=new JButton("2");
		twoButton.setBounds(130, 330, 80, 80);
		twoButton.setBackground(Color.white);
		twoButton.addActionListener(this);
		jf.add(twoButton);
		

		JButton threeButton=new JButton("3");
		threeButton.setBounds(230, 330, 80, 80);
		threeButton.setBackground(Color.white);
		threeButton.addActionListener(this);
		jf.add(threeButton);
		
		JButton dotButton=new JButton(".");
		dotButton.setBounds(30, 430, 80, 80);
		dotButton.setBackground(Color.white);
		dotButton.addActionListener(this);
		jf.add(dotButton);
		
		JButton zeroButton=new JButton("0");
		zeroButton.setBounds(130, 430, 80, 80);
		zeroButton.setBackground(Color.white);
		zeroButton.addActionListener(this);
		jf.add(zeroButton);
		

		JButton equalButton=new JButton("=");
		equalButton.setBounds(230, 430, 80, 80);
		equalButton.setBackground(Color.yellow);
		equalButton.setFont(new Font("Arial", 30,30));
		equalButton.addActionListener(this);
		jf.add(equalButton);
		
		JButton divButton=new JButton("/");
		divButton.setBounds(330, 130, 80, 80);
		divButton.setBackground(Color.yellow);
		divButton.setFont(new Font("Arial", 30,30));
		divButton.addActionListener(this);
		jf.add(divButton);
		
		JButton multiButton=new JButton("*");
		multiButton.setBounds(330, 230, 80, 80);
		multiButton.setBackground(Color.yellow);
		multiButton.setFont(new Font("Arial", 30,30));
		multiButton.addActionListener(this);
		jf.add(multiButton);
		
		JButton minButton=new JButton("-");
		minButton.setBounds(330, 330, 80, 80);
		minButton.setBackground(Color.yellow);
		minButton.setFont(new Font("Arial", 30,30));
		minButton.addActionListener(this);
		jf.add(minButton);
		JButton pluseButton=new JButton("+");
		pluseButton.setBounds(330, 430, 80, 80);
		pluseButton.setBackground(Color.yellow);
		pluseButton.setFont(new Font("Arial", 30,30));
		pluseButton.addActionListener(this);
		jf.add(pluseButton);
		
		
		JButton clrButton=new JButton("CLR");
		clrButton.setBounds(430, 130, 80, 80);
		
		clrButton.setBackground(Color.red);
		clrButton.addActionListener(this);
		jf.add(clrButton);
      
        jf.setVisible(true);
        jf.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    }

   /* private JButton createButton(String label, int x, int y) {
        JButton button = new JButton(label);
        button.setBounds(x, y, 60, 40);
        button.addActionListener(this);
        jf.add(button);
        return button;
    }*/

   // private JButton createOperatorButton(String label, int x, int y) {
       // JButton button = createButton(label, x, y);
        //button.setForeground(Color.RED);
       // return button;
   // }

    public static void main(String arr[]) {
        new Calculator1();
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        String command = e.getActionCommand();

        if ("0123456789".contains(command)) {
            if (isOperatorClicked) {
                displayJLabel.setText(command);
                isOperatorClicked = false;
            } else {
                displayJLabel.setText(displayJLabel.getText() + command);
            }
        } else if ("+-*/".contains(command)) {
            if (!displayJLabel.getText().isEmpty()) {
                num1 = Double.parseDouble(displayJLabel.getText());
                operator = command;
                isOperatorClicked = true;
            }
        } else if (command.equals("=")) {
            if (!operator.isEmpty() && !isOperatorClicked) {
                double num2 = Double.parseDouble(displayJLabel.getText());
                double result = performOperation(num1, num2, operator);
                displayJLabel.setText(String.valueOf(result));
                
                isOperatorClicked = true;
            }
        } else if (command.equals("CLR")) {
            displayJLabel.setText("");
           
        }
    }

    private double performOperation(double num1, double num2, String operator) {
        switch (operator) {
            case "+":
                return num1 + num2;
            case "-":
                return num1 - num2;
            case "*":
                return num1 * num2;
            case "/":
                if (num2 != 0) {
                    return num1 / num2;
                } else {
                    return Double.NaN; // Handle division by zero
                }
            default:
                return num2;
        }
    }
}
